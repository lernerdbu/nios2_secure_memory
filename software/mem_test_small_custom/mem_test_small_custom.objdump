
mem_test_small_custom.elf:     file format elf32-littlenios2
mem_test_small_custom.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001ad0 memsz 0x00001ad0 flags r-x
    LOAD off    0x00002af0 vaddr 0x00009af0 paddr 0x00009c54 align 2**12
         filesz 0x00000164 memsz 0x00000164 flags rw-
    LOAD off    0x00002db8 vaddr 0x00009db8 paddr 0x00009db8 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00002c54  2**0
                  CONTENTS
  2 .text         00001560  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000570  00009580  00009580  00002580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000164  00009af0  00009c54  00002af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  00009db8  00009db8  00002db8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00009dd0  00009dd0  00002c54  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00002c54  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004c0  00000000  00000000  00002c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0000a527  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003184  00000000  00000000  0000d66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00004136  00000000  00000000  000107f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000006b0  00000000  00000000  0001492c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001a14  00000000  00000000  00014fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00002d27  00000000  00000000  000169f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000020  00000000  00000000  00019718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000470  00000000  00000000  00019738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0001b204  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001b207  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001b20a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001b20b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001b20c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001b210  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001b214  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001b218  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001b221  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001b22a  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000013  00000000  00000000  0001b233  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002d  00000000  00000000  0001b246  2**0
                  CONTENTS, READONLY
 29 .jdi          00005236  00000000  00000000  0001b273  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00009580 l    d  .rodata	00000000 .rodata
00009af0 l    d  .rwdata	00000000 .rwdata
00009db8 l    d  .bss	00000000 .bss
00009dd0 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/dlerner/Documents/FPGA/EC544_Project/software/mem_test_small_custom_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 memtest_small.c
00000000 l    df *ABS*	00000000 impure.c
00009af0 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00008790 l     F .text	00000200 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 vfprintf.c
000089c4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00009c34 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000094e0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcpy.c
00008684 g     F .text	00000018 putchar
00009354 g     F .text	0000002c alt_main
0000869c g     F .text	00000080 _puts_r
00009c54 g       *ABS*	00000000 __flash_rwdata_start
00009dd0 g       *ABS*	00000000 __alt_heap_start
00008634 g     F .text	00000048 printf
00009384 g     F .text	00000004 __malloc_unlock
0000805c g     F .text	00000070 GetInputString
00009c38 g     O .rwdata	00000004 jtag_uart
000094f4 g     F .text	00000008 altera_nios2_gen2_irq_init
00008f34 g     F .text	0000000c __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009dc0 g     O .bss	00000004 errno
00009dc8 g     O .bss	00000004 alt_argv
00011c2c g       *ABS*	00000000 _gp
00009bd4 g     O .rwdata	00000030 alt_fd_list
0000867c g     F .text	00000008 _putchar_r
00009558 g     F .text	00000028 memcpy
0000871c g     F .text	00000010 puts
00009454 g     F .text	00000058 altera_avalon_jtag_uart_read
00008378 g     F .text	00000010 malloc
000085f8 g     F .text	0000003c _printf_r
000091d0 g     F .text	00000064 .hidden __udivsi3
000094fc g     F .text	0000005c alt_icache_flush
0000872c g     F .text	00000048 _sbrk_r
00009c3c g     O .rwdata	00000004 alt_max_fd
00009c2c g     O .rwdata	00000004 _global_impure_ptr
00009dd0 g       *ABS*	00000000 __bss_end
00009290 g     F .text	00000040 alt_getchar
00008994 g     F .text	00000018 strtol_l
000089ac g     F .text	00000018 strtol
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
00009c04 g     O .rwdata	00000028 alt_dev_null
000094dc g     F .text	00000004 alt_dcache_flush_all
00009c54 g       *ABS*	00000000 __ram_rwdata_end
00009c40 g     O .rwdata	00000008 alt_dev_list
000093d4 g     F .text	0000005c write
00009038 g     F .text	00000054 _putc_r
00009af0 g       *ABS*	00000000 __ram_rodata_end
00009234 g     F .text	0000005c .hidden __umodsi3
00009dd0 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000094ac g     F .text	00000030 altera_avalon_jtag_uart_write
00008a30 g     F .text	000004ec ___vfprintf_internal_r
00008398 g     F .text	00000100 _free_r
00009964 g     O .rodata	00000180 _ctype_b
00008020 g     F .text	0000003c _start
00009450 g     F .text	00000004 alt_sys_init
00009af0 g       *ABS*	00000000 __ram_rwdata_start
00009580 g       *ABS*	00000000 __ram_rodata_start
00009dd0 g       *ABS*	00000000 __alt_stack_base
00009380 g     F .text	00000004 __malloc_lock
00009388 g     F .text	0000004c sbrk
00008f40 g     F .text	000000a8 __sfvwrite_small_dev
00009db8 g       *ABS*	00000000 __bss_start
000080cc g     F .text	000002ac main
00009dc4 g     O .bss	00000004 alt_envp
0000d000 g       *ABS*	00000000 __alt_heap_limit
00008990 g     F .text	00000004 _strtol_r
00008498 g     F .text	00000160 _malloc_r
00009c50 g     O .rwdata	00000004 alt_errno
00008fe8 g     F .text	00000050 putc
000090dc g     F .text	00000080 .hidden __divsi3
00009580 g       *ABS*	00000000 __flash_rodata_start
00009430 g     F .text	00000020 alt_irq_init
0000908c g     F .text	00000050 _write_r
00009c30 g     O .rwdata	00000004 _impure_ptr
00009dcc g     O .bss	00000004 alt_argc
00009c48 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009c54 g       *ABS*	00000000 _edata
00009dd0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000915c g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00009860 g     O .rodata	00000101 _ctype_
0000801c g       .entry	00000000 _exit
00008774 g     F .text	0000001c strlen
00009db8 g     O .bss	00000004 __malloc_sbrk_start
000094e8 g     F .text	0000000c alt_icache_flush_all
00009dbc g     O .bss	00000004 __malloc_free_list
00008f1c g     F .text	00000018 __vfprintf_internal
000092d0 g     F .text	00000084 alt_load
00008388 g     F .text	00000010 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <_exit>:
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6870b14 	ori	gp,gp,7212
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a76e14 	ori	r2,r2,40376

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e77414 	ori	r3,r3,40400

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00092d00 	call	92d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00093540 	call	9354 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <GetInputString>:
*           returns the string, minus any '\r' characters it 
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
    805c:	defffb04 	addi	sp,sp,-20
    8060:	dcc00315 	stw	r19,12(sp)
    8064:	dc800215 	stw	r18,8(sp)
    8068:	dc400115 	stw	r17,4(sp)
    806c:	dfc00415 	stw	ra,16(sp)
    8070:	dc000015 	stw	r16,0(sp)
    8074:	2027883a 	mov	r19,r4
    8078:	2825883a 	mov	r18,r5
  int i;
  int ch = 0;
  
  for(i = 0; (ch != '\n') && (i < size); )
    807c:	0023883a 	mov	r17,zero
    8080:	8c800b0e 	bge	r17,r18,80b0 <GetInputString+0x54>
  {
    if( (ch = alt_getchar()) != '\r')
    8084:	00092900 	call	9290 <alt_getchar>
    8088:	1021883a 	mov	r16,r2
    808c:	10800360 	cmpeqi	r2,r2,13
    8090:	103ffb1e 	bne	r2,zero,8080 <GetInputString+0x24>
    {
      putchar(ch);
    8094:	8009883a 	mov	r4,r16
    8098:	00086840 	call	8684 <putchar>
      entry[i] = ch;
    809c:	9c45883a 	add	r2,r19,r17
    80a0:	14000005 	stb	r16,0(r2)
  for(i = 0; (ch != '\n') && (i < size); )
    80a4:	84000298 	cmpnei	r16,r16,10
      i++;
    80a8:	8c400044 	addi	r17,r17,1
  for(i = 0; (ch != '\n') && (i < size); )
    80ac:	803ff41e 	bne	r16,zero,8080 <GetInputString+0x24>
    }
  }
}
    80b0:	dfc00417 	ldw	ra,16(sp)
    80b4:	dcc00317 	ldw	r19,12(sp)
    80b8:	dc800217 	ldw	r18,8(sp)
    80bc:	dc400117 	ldw	r17,4(sp)
    80c0:	dc000017 	ldw	r16,0(sp)
    80c4:	dec00504 	addi	sp,sp,20
    80c8:	f800283a 	ret

000080cc <main>:
  printf("\n\n");
    80cc:	01000074 	movhi	r4,1
*  Purpose: Continually prints the menu and performs the actions
*           requested by the user.
* 
******************************************************************/
int main(void)
{
    80d0:	defff304 	addi	sp,sp,-52
  printf("\n\n");
    80d4:	2125ef04 	addi	r4,r4,-26692
{
    80d8:	dfc00c15 	stw	ra,48(sp)
    80dc:	dc800615 	stw	r18,24(sp)
    80e0:	dc400515 	stw	r17,20(sp)
    80e4:	ddc00b15 	stw	r23,44(sp)
    80e8:	dd800a15 	stw	r22,40(sp)
    80ec:	dd400915 	stw	r21,36(sp)
    80f0:	dd000815 	stw	r20,32(sp)
    80f4:	dcc00715 	stw	r19,28(sp)
    80f8:	dc000415 	stw	r16,16(sp)
  printf("\n\n");
    80fc:	000871c0 	call	871c <puts>
  printf("             <---->   Nios II Memory Test.   <---->\n");
    8100:	01000074 	movhi	r4,1
    8104:	21256004 	addi	r4,r4,-27264
    8108:	000871c0 	call	871c <puts>
  printf("This software example tests the memory in your system to assure it\n");
    810c:	01000074 	movhi	r4,1
    8110:	21256d04 	addi	r4,r4,-27212
    8114:	000871c0 	call	871c <puts>
  printf("is working properly.  This test is destructive to the contents of\n");
    8118:	01000074 	movhi	r4,1
    811c:	21257e04 	addi	r4,r4,-27144
    8120:	000871c0 	call	871c <puts>
  printf("the memory it tests. Assure the memory being tested does not contain\n");
    8124:	01000074 	movhi	r4,1
    8128:	21258f04 	addi	r4,r4,-27076
    812c:	000871c0 	call	871c <puts>
  printf("the executable or data sections of this code or the exception address\n");
    8130:	01000074 	movhi	r4,1
    8134:	2125a104 	addi	r4,r4,-27004
    8138:	000871c0 	call	871c <puts>
  printf("of the system.\n");
    813c:	01000074 	movhi	r4,1
    8140:	2125b304 	addi	r4,r4,-26932
  /* Print the Header */
  MenuHeader();

  while (1)
  {
    printf("\nPress enter to continue or 'q' to quit.\n");
    8144:	04400074 	movhi	r17,1
    printf("Base address to start memory test: (i.e. 0x800000)\n");
    8148:	04800074 	movhi	r18,1
  printf("of the system.\n");
    814c:	000871c0 	call	871c <puts>
    printf("\nPress enter to continue or 'q' to quit.\n");
    8150:	8c65b704 	addi	r17,r17,-26916
    printf("Base address to start memory test: (i.e. 0x800000)\n");
    8154:	94a5c904 	addi	r18,r18,-26844
    ch = alt_getchar();
    putchar(ch);
    if(ch == 'q' || ch == 'Q')
    8158:	04fff7c4 	movi	r19,-33
    printf("\nPress enter to continue or 'q' to quit.\n");
    815c:	8809883a 	mov	r4,r17
    8160:	000871c0 	call	871c <puts>
    ch = alt_getchar();
    8164:	00092900 	call	9290 <alt_getchar>
    putchar(ch);
    8168:	1009883a 	mov	r4,r2
    ch = alt_getchar();
    816c:	1021883a 	mov	r16,r2
    putchar(ch);
    8170:	00086840 	call	8684 <putchar>
    if(ch == 'q' || ch == 'Q')
    8174:	84c4703a 	and	r2,r16,r19
    8178:	10801458 	cmpnei	r2,r2,81
    817c:	10006d26 	beq	r2,zero,8334 <main+0x268>
        printf( "\nExiting from Memory Test.\n");
	/* Add this so that it will return back to command prompt */
	printf( "%c", 0x4);
        break;
    }
    else if (ch == '\n')
    8180:	84000298 	cmpnei	r16,r16,10
    8184:	803ff51e 	bne	r16,zero,815c <main+0x90>
      printf(" -ERROR: Invalid base address entered.  Address must be in the form '0x800000'\n\n");
    8188:	04c00074 	movhi	r19,1
    818c:	9ce5d604 	addi	r19,r19,-26792
    printf("Base address to start memory test: (i.e. 0x800000)\n");
    8190:	9009883a 	mov	r4,r18
    8194:	000871c0 	call	871c <puts>
    printf(">");
    8198:	01000f84 	movi	r4,62
    819c:	00086840 	call	8684 <putchar>
    GetInputString( line, sizeof(line), stdin );
    81a0:	d0a00117 	ldw	r2,-32764(gp)
    81a4:	01400304 	movi	r5,12
    81a8:	d9000104 	addi	r4,sp,4
    81ac:	11800117 	ldw	r6,4(r2)
    81b0:	000805c0 	call	805c <GetInputString>
    if((*base_address = strtol(line, &pend, 16)) < 0)
    81b4:	01800404 	movi	r6,16
    81b8:	d80b883a 	mov	r5,sp
    81bc:	d9000104 	addi	r4,sp,4
    81c0:	00089ac0 	call	89ac <strtol>
    81c4:	1021883a 	mov	r16,r2
    81c8:	1000050e 	bge	r2,zero,81e0 <main+0x114>
      printf("%s\n", line);
    81cc:	d9000104 	addi	r4,sp,4
    81d0:	000871c0 	call	871c <puts>
      printf(" -ERROR: Invalid base address entered.  Address must be in the form '0x800000'\n\n");
    81d4:	9809883a 	mov	r4,r19
    81d8:	000871c0 	call	871c <puts>
    printf("Base address to start memory test: (i.e. 0x800000)\n");
    81dc:	003fec06 	br	8190 <main+0xc4>
  printf("\n");
    81e0:	01000284 	movi	r4,10
    81e4:	00086840 	call	8684 <putchar>
  printf("Testing RAM at 0x%X\n\n", memory_base);
    81e8:	01000074 	movhi	r4,1
    81ec:	800b883a 	mov	r5,r16
    81f0:	2125ea04 	addi	r4,r4,-26712
    81f4:	00086340 	call	8634 <printf>
  printf("Writing string \"%s\" in addr 0x%X\n", text, memory_base);
    81f8:	01400074 	movhi	r5,1
    81fc:	01000074 	movhi	r4,1
    8200:	800d883a 	mov	r6,r16
    8204:	2965f004 	addi	r5,r5,-26688
    8208:	2125f304 	addi	r4,r4,-26676
		IOWR_32DIRECT(addr, offset, next[0]);
    820c:	05db1b34 	movhi	r23,27756
  printf("Writing string \"%s\" in addr 0x%X\n", text, memory_base);
    8210:	00086340 	call	8634 <printf>
		IOWR_32DIRECT(addr, offset, next[0]);
    8214:	bdd95204 	addi	r23,r23,25928
    8218:	85c00035 	stwio	r23,0(r16)
    821c:	059bddf4 	movhi	r22,28535
    8220:	85000104 	addi	r20,r16,4
    8224:	b5881bc4 	addi	r22,r22,8303
    8228:	85800135 	stwio	r22,4(r16)
    822c:	05401934 	movhi	r21,100
    8230:	84c00204 	addi	r19,r16,8
    8234:	ad5b1c84 	addi	r21,r21,27762
    8238:	85400235 	stwio	r21,8(r16)
	char* val = malloc(len);
    823c:	010000c4 	movi	r4,3
    8240:	00083780 	call	8378 <malloc>
    8244:	100b883a 	mov	r5,r2
		next[0] = IORD_32DIRECT(addr, offset);
    8248:	80800037 	ldwio	r2,0(r16)
    824c:	28800015 	stw	r2,0(r5)
    8250:	80800137 	ldwio	r2,4(r16)
    8254:	28800115 	stw	r2,4(r5)
    8258:	80800237 	ldwio	r2,8(r16)
  printf("Read data \"%s\" from addr 0x%X\n", ret_val, memory_base);
    825c:	01000074 	movhi	r4,1
		next[0] = IORD_32DIRECT(addr, offset);
    8260:	28800215 	stw	r2,8(r5)
  printf("Read data \"%s\" from addr 0x%X\n", ret_val, memory_base);
    8264:	800d883a 	mov	r6,r16
    8268:	2125fc04 	addi	r4,r4,-26640
    826c:	00086340 	call	8634 <printf>
	char* val = malloc(len);
    8270:	010000c4 	movi	r4,3
    8274:	00083780 	call	8378 <malloc>
    8278:	100b883a 	mov	r5,r2
		next[0] = ALT_CI_CUSTOM_SECURE_MEM_INSTRUCTIONS(0, 0, addr+offset);
    827c:	0405c032 	custom	0,r2,zero,r16
    8280:	28800015 	stw	r2,0(r5)
    8284:	0505c032 	custom	0,r2,zero,r20
    8288:	28800115 	stw	r2,4(r5)
    828c:	04c5c032 	custom	0,r2,zero,r19
  printf("Read secure data \"%s\" from addr 0x%X\n", ret_val, memory_base);
    8290:	01000074 	movhi	r4,1
    8294:	800d883a 	mov	r6,r16
		next[0] = ALT_CI_CUSTOM_SECURE_MEM_INSTRUCTIONS(0, 0, addr+offset);
    8298:	28800215 	stw	r2,8(r5)
  printf("Read secure data \"%s\" from addr 0x%X\n", ret_val, memory_base);
    829c:	21260404 	addi	r4,r4,-26608
    82a0:	00086340 	call	8634 <printf>
  printf("Writing secure data \"%s\" in addr 0x%X\n", text, memory_base);
    82a4:	01400074 	movhi	r5,1
    82a8:	01000074 	movhi	r4,1
    82ac:	800d883a 	mov	r6,r16
    82b0:	2965f004 	addi	r5,r5,-26688
    82b4:	21260e04 	addi	r4,r4,-26568
    82b8:	00086340 	call	8634 <printf>
		ALT_CI_CUSTOM_SECURE_MEM_INSTRUCTIONS(1, next[0], addr+offset);
    82bc:	bc2fc072 	custom	1,r23,r23,r16
    82c0:	b52dc072 	custom	1,r22,r22,r20
    82c4:	acebc072 	custom	1,r21,r21,r19
	char* val = malloc(len);
    82c8:	010000c4 	movi	r4,3
    82cc:	00083780 	call	8378 <malloc>
    82d0:	100b883a 	mov	r5,r2
		next[0] = IORD_32DIRECT(addr, offset);
    82d4:	80800037 	ldwio	r2,0(r16)
    82d8:	28800015 	stw	r2,0(r5)
    82dc:	80800137 	ldwio	r2,4(r16)
    82e0:	28800115 	stw	r2,4(r5)
    82e4:	80800237 	ldwio	r2,8(r16)
  printf("Read data \"%s\" from addr 0x%X\n", ret_val, memory_base);
    82e8:	01000074 	movhi	r4,1
		next[0] = IORD_32DIRECT(addr, offset);
    82ec:	28800215 	stw	r2,8(r5)
  printf("Read data \"%s\" from addr 0x%X\n", ret_val, memory_base);
    82f0:	800d883a 	mov	r6,r16
    82f4:	2125fc04 	addi	r4,r4,-26640
    82f8:	00086340 	call	8634 <printf>
	char* val = malloc(len);
    82fc:	010000c4 	movi	r4,3
    8300:	00083780 	call	8378 <malloc>
    8304:	100b883a 	mov	r5,r2
		next[0] = ALT_CI_CUSTOM_SECURE_MEM_INSTRUCTIONS(0, 0, addr+offset);
    8308:	0405c032 	custom	0,r2,zero,r16
    830c:	28800015 	stw	r2,0(r5)
    8310:	0529c032 	custom	0,r20,zero,r20
    8314:	2d000115 	stw	r20,4(r5)
    8318:	04e7c032 	custom	0,r19,zero,r19
  printf("Read secure data \"%s\" from addr 0x%X\n", ret_val, memory_base);
    831c:	01000074 	movhi	r4,1
		next[0] = ALT_CI_CUSTOM_SECURE_MEM_INSTRUCTIONS(0, 0, addr+offset);
    8320:	2cc00215 	stw	r19,8(r5)
  printf("Read secure data \"%s\" from addr 0x%X\n", ret_val, memory_base);
    8324:	800d883a 	mov	r6,r16
    8328:	21260404 	addi	r4,r4,-26608
    832c:	00086340 	call	8634 <printf>
}
    8330:	003f8906 	br	8158 <main+0x8c>
        printf( "\nExiting from Memory Test.\n");
    8334:	01000074 	movhi	r4,1
    8338:	2125c204 	addi	r4,r4,-26872
    833c:	000871c0 	call	871c <puts>
	printf( "%c", 0x4);
    8340:	01000104 	movi	r4,4
    8344:	00086840 	call	8684 <putchar>
    {
        TestRam();
    }
  }
  return (0);
}
    8348:	0005883a 	mov	r2,zero
    834c:	dfc00c17 	ldw	ra,48(sp)
    8350:	ddc00b17 	ldw	r23,44(sp)
    8354:	dd800a17 	ldw	r22,40(sp)
    8358:	dd400917 	ldw	r21,36(sp)
    835c:	dd000817 	ldw	r20,32(sp)
    8360:	dcc00717 	ldw	r19,28(sp)
    8364:	dc800617 	ldw	r18,24(sp)
    8368:	dc400517 	ldw	r17,20(sp)
    836c:	dc000417 	ldw	r16,16(sp)
    8370:	dec00d04 	addi	sp,sp,52
    8374:	f800283a 	ret

00008378 <malloc>:
    8378:	00800074 	movhi	r2,1
    837c:	200b883a 	mov	r5,r4
    8380:	11270c17 	ldw	r4,-25552(r2)
    8384:	00084981 	jmpi	8498 <_malloc_r>

00008388 <free>:
    8388:	00800074 	movhi	r2,1
    838c:	200b883a 	mov	r5,r4
    8390:	11270c17 	ldw	r4,-25552(r2)
    8394:	00083981 	jmpi	8398 <_free_r>

00008398 <_free_r>:
    8398:	28003e26 	beq	r5,zero,8494 <_free_r+0xfc>
    839c:	28bfff17 	ldw	r2,-4(r5)
    83a0:	defffd04 	addi	sp,sp,-12
    83a4:	dc000115 	stw	r16,4(sp)
    83a8:	dfc00215 	stw	ra,8(sp)
    83ac:	2c3fff04 	addi	r16,r5,-4
    83b0:	1000010e 	bge	r2,zero,83b8 <_free_r+0x20>
    83b4:	80a1883a 	add	r16,r16,r2
    83b8:	d9000015 	stw	r4,0(sp)
    83bc:	00093800 	call	9380 <__malloc_lock>
    83c0:	00800074 	movhi	r2,1
    83c4:	10a76f17 	ldw	r2,-25156(r2)
    83c8:	d9000017 	ldw	r4,0(sp)
    83cc:	1000071e 	bne	r2,zero,83ec <_free_r+0x54>
    83d0:	80000115 	stw	zero,4(r16)
    83d4:	00800074 	movhi	r2,1
    83d8:	14276f15 	stw	r16,-25156(r2)
    83dc:	dfc00217 	ldw	ra,8(sp)
    83e0:	dc000117 	ldw	r16,4(sp)
    83e4:	dec00304 	addi	sp,sp,12
    83e8:	00093841 	jmpi	9384 <__malloc_unlock>
    83ec:	8080092e 	bgeu	r16,r2,8414 <_free_r+0x7c>
    83f0:	81400017 	ldw	r5,0(r16)
    83f4:	8147883a 	add	r3,r16,r5
    83f8:	10c0041e 	bne	r2,r3,840c <_free_r+0x74>
    83fc:	10c00017 	ldw	r3,0(r2)
    8400:	10800117 	ldw	r2,4(r2)
    8404:	1947883a 	add	r3,r3,r5
    8408:	80c00015 	stw	r3,0(r16)
    840c:	80800115 	stw	r2,4(r16)
    8410:	003ff006 	br	83d4 <_free_r+0x3c>
    8414:	1007883a 	mov	r3,r2
    8418:	10800117 	ldw	r2,4(r2)
    841c:	10000126 	beq	r2,zero,8424 <_free_r+0x8c>
    8420:	80bffc2e 	bgeu	r16,r2,8414 <_free_r+0x7c>
    8424:	19400017 	ldw	r5,0(r3)
    8428:	194d883a 	add	r6,r3,r5
    842c:	34000b1e 	bne	r6,r16,845c <_free_r+0xc4>
    8430:	81800017 	ldw	r6,0(r16)
    8434:	298b883a 	add	r5,r5,r6
    8438:	19400015 	stw	r5,0(r3)
    843c:	194d883a 	add	r6,r3,r5
    8440:	11bfe61e 	bne	r2,r6,83dc <_free_r+0x44>
    8444:	11800017 	ldw	r6,0(r2)
    8448:	10800117 	ldw	r2,4(r2)
    844c:	314b883a 	add	r5,r6,r5
    8450:	19400015 	stw	r5,0(r3)
    8454:	18800115 	stw	r2,4(r3)
    8458:	003fe006 	br	83dc <_free_r+0x44>
    845c:	8180032e 	bgeu	r16,r6,846c <_free_r+0xd4>
    8460:	00800304 	movi	r2,12
    8464:	20800015 	stw	r2,0(r4)
    8468:	003fdc06 	br	83dc <_free_r+0x44>
    846c:	81800017 	ldw	r6,0(r16)
    8470:	818b883a 	add	r5,r16,r6
    8474:	1140041e 	bne	r2,r5,8488 <_free_r+0xf0>
    8478:	11400017 	ldw	r5,0(r2)
    847c:	10800117 	ldw	r2,4(r2)
    8480:	298b883a 	add	r5,r5,r6
    8484:	81400015 	stw	r5,0(r16)
    8488:	80800115 	stw	r2,4(r16)
    848c:	1c000115 	stw	r16,4(r3)
    8490:	003fd206 	br	83dc <_free_r+0x44>
    8494:	f800283a 	ret

00008498 <_malloc_r>:
    8498:	defffc04 	addi	sp,sp,-16
    849c:	00bfff04 	movi	r2,-4
    84a0:	dc400115 	stw	r17,4(sp)
    84a4:	2c4000c4 	addi	r17,r5,3
    84a8:	88a2703a 	and	r17,r17,r2
    84ac:	8c400204 	addi	r17,r17,8
    84b0:	dc800215 	stw	r18,8(sp)
    84b4:	dfc00315 	stw	ra,12(sp)
    84b8:	dc000015 	stw	r16,0(sp)
    84bc:	88800328 	cmpgeui	r2,r17,12
    84c0:	2025883a 	mov	r18,r4
    84c4:	10001a1e 	bne	r2,zero,8530 <_malloc_r+0x98>
    84c8:	04400304 	movi	r17,12
    84cc:	89401936 	bltu	r17,r5,8534 <_malloc_r+0x9c>
    84d0:	9009883a 	mov	r4,r18
    84d4:	00093800 	call	9380 <__malloc_lock>
    84d8:	00800074 	movhi	r2,1
    84dc:	10e76f17 	ldw	r3,-25156(r2)
    84e0:	1821883a 	mov	r16,r3
    84e4:	80001c1e 	bne	r16,zero,8558 <_malloc_r+0xc0>
    84e8:	00800074 	movhi	r2,1
    84ec:	10a76e17 	ldw	r2,-25160(r2)
    84f0:	1000051e 	bne	r2,zero,8508 <_malloc_r+0x70>
    84f4:	000b883a 	mov	r5,zero
    84f8:	9009883a 	mov	r4,r18
    84fc:	000872c0 	call	872c <_sbrk_r>
    8500:	00c00074 	movhi	r3,1
    8504:	18a76e15 	stw	r2,-25160(r3)
    8508:	880b883a 	mov	r5,r17
    850c:	9009883a 	mov	r4,r18
    8510:	000872c0 	call	872c <_sbrk_r>
    8514:	10ffffd8 	cmpnei	r3,r2,-1
    8518:	18002d1e 	bne	r3,zero,85d0 <_malloc_r+0x138>
    851c:	00800304 	movi	r2,12
    8520:	90800015 	stw	r2,0(r18)
    8524:	9009883a 	mov	r4,r18
    8528:	00093840 	call	9384 <__malloc_unlock>
    852c:	00000306 	br	853c <_malloc_r+0xa4>
    8530:	883fe60e 	bge	r17,zero,84cc <_malloc_r+0x34>
    8534:	00800304 	movi	r2,12
    8538:	90800015 	stw	r2,0(r18)
    853c:	0005883a 	mov	r2,zero
    8540:	dfc00317 	ldw	ra,12(sp)
    8544:	dc800217 	ldw	r18,8(sp)
    8548:	dc400117 	ldw	r17,4(sp)
    854c:	dc000017 	ldw	r16,0(sp)
    8550:	dec00404 	addi	sp,sp,16
    8554:	f800283a 	ret
    8558:	80800017 	ldw	r2,0(r16)
    855c:	1445c83a 	sub	r2,r2,r17
    8560:	10001816 	blt	r2,zero,85c4 <_malloc_r+0x12c>
    8564:	11000330 	cmpltui	r4,r2,12
    8568:	2000041e 	bne	r4,zero,857c <_malloc_r+0xe4>
    856c:	80800015 	stw	r2,0(r16)
    8570:	80a1883a 	add	r16,r16,r2
    8574:	84400015 	stw	r17,0(r16)
    8578:	00000406 	br	858c <_malloc_r+0xf4>
    857c:	80800117 	ldw	r2,4(r16)
    8580:	1c000e1e 	bne	r3,r16,85bc <_malloc_r+0x124>
    8584:	00c00074 	movhi	r3,1
    8588:	18a76f15 	stw	r2,-25156(r3)
    858c:	9009883a 	mov	r4,r18
    8590:	00093840 	call	9384 <__malloc_unlock>
    8594:	013ffe04 	movi	r4,-8
    8598:	808002c4 	addi	r2,r16,11
    859c:	80c00104 	addi	r3,r16,4
    85a0:	1104703a 	and	r2,r2,r4
    85a4:	10c9c83a 	sub	r4,r2,r3
    85a8:	10ffe526 	beq	r2,r3,8540 <_malloc_r+0xa8>
    85ac:	8121883a 	add	r16,r16,r4
    85b0:	1887c83a 	sub	r3,r3,r2
    85b4:	80c00015 	stw	r3,0(r16)
    85b8:	003fe106 	br	8540 <_malloc_r+0xa8>
    85bc:	18800115 	stw	r2,4(r3)
    85c0:	003ff206 	br	858c <_malloc_r+0xf4>
    85c4:	8007883a 	mov	r3,r16
    85c8:	84000117 	ldw	r16,4(r16)
    85cc:	003fc506 	br	84e4 <_malloc_r+0x4c>
    85d0:	140000c4 	addi	r16,r2,3
    85d4:	00ffff04 	movi	r3,-4
    85d8:	80e0703a 	and	r16,r16,r3
    85dc:	143fe526 	beq	r2,r16,8574 <_malloc_r+0xdc>
    85e0:	808bc83a 	sub	r5,r16,r2
    85e4:	9009883a 	mov	r4,r18
    85e8:	000872c0 	call	872c <_sbrk_r>
    85ec:	10bfffe0 	cmpeqi	r2,r2,-1
    85f0:	103fe026 	beq	r2,zero,8574 <_malloc_r+0xdc>
    85f4:	003fc906 	br	851c <_malloc_r+0x84>

000085f8 <_printf_r>:
    85f8:	defffd04 	addi	sp,sp,-12
    85fc:	dfc00015 	stw	ra,0(sp)
    8600:	d9800115 	stw	r6,4(sp)
    8604:	d9c00215 	stw	r7,8(sp)
    8608:	21800217 	ldw	r6,8(r4)
    860c:	00c00074 	movhi	r3,1
    8610:	18e3d004 	addi	r3,r3,-28864
    8614:	30c00115 	stw	r3,4(r6)
    8618:	280d883a 	mov	r6,r5
    861c:	21400217 	ldw	r5,8(r4)
    8620:	d9c00104 	addi	r7,sp,4
    8624:	0008a300 	call	8a30 <___vfprintf_internal_r>
    8628:	dfc00017 	ldw	ra,0(sp)
    862c:	dec00304 	addi	sp,sp,12
    8630:	f800283a 	ret

00008634 <printf>:
    8634:	defffc04 	addi	sp,sp,-16
    8638:	dfc00015 	stw	ra,0(sp)
    863c:	d9400115 	stw	r5,4(sp)
    8640:	d9800215 	stw	r6,8(sp)
    8644:	d9c00315 	stw	r7,12(sp)
    8648:	00800074 	movhi	r2,1
    864c:	10e70c17 	ldw	r3,-25552(r2)
    8650:	00800074 	movhi	r2,1
    8654:	10a3d004 	addi	r2,r2,-28864
    8658:	19400217 	ldw	r5,8(r3)
    865c:	d9800104 	addi	r6,sp,4
    8660:	28800115 	stw	r2,4(r5)
    8664:	200b883a 	mov	r5,r4
    8668:	19000217 	ldw	r4,8(r3)
    866c:	0008f1c0 	call	8f1c <__vfprintf_internal>
    8670:	dfc00017 	ldw	ra,0(sp)
    8674:	dec00404 	addi	sp,sp,16
    8678:	f800283a 	ret

0000867c <_putchar_r>:
    867c:	21800217 	ldw	r6,8(r4)
    8680:	00090381 	jmpi	9038 <_putc_r>

00008684 <putchar>:
    8684:	00800074 	movhi	r2,1
    8688:	10a70c17 	ldw	r2,-25552(r2)
    868c:	200b883a 	mov	r5,r4
    8690:	11800217 	ldw	r6,8(r2)
    8694:	1009883a 	mov	r4,r2
    8698:	00090381 	jmpi	9038 <_putc_r>

0000869c <_puts_r>:
    869c:	defffd04 	addi	sp,sp,-12
    86a0:	dc000015 	stw	r16,0(sp)
    86a4:	2021883a 	mov	r16,r4
    86a8:	2809883a 	mov	r4,r5
    86ac:	dfc00215 	stw	ra,8(sp)
    86b0:	dc400115 	stw	r17,4(sp)
    86b4:	2823883a 	mov	r17,r5
    86b8:	00087740 	call	8774 <strlen>
    86bc:	81400217 	ldw	r5,8(r16)
    86c0:	00c00074 	movhi	r3,1
    86c4:	18e3d004 	addi	r3,r3,-28864
    86c8:	28c00115 	stw	r3,4(r5)
    86cc:	100f883a 	mov	r7,r2
    86d0:	880d883a 	mov	r6,r17
    86d4:	8009883a 	mov	r4,r16
    86d8:	0008f400 	call	8f40 <__sfvwrite_small_dev>
    86dc:	10ffffe0 	cmpeqi	r3,r2,-1
    86e0:	1800091e 	bne	r3,zero,8708 <_puts_r+0x6c>
    86e4:	81400217 	ldw	r5,8(r16)
    86e8:	01800074 	movhi	r6,1
    86ec:	01c00044 	movi	r7,1
    86f0:	28800117 	ldw	r2,4(r5)
    86f4:	31a5ef04 	addi	r6,r6,-26692
    86f8:	8009883a 	mov	r4,r16
    86fc:	103ee83a 	callr	r2
    8700:	10bfffe0 	cmpeqi	r2,r2,-1
    8704:	0085c83a 	sub	r2,zero,r2
    8708:	dfc00217 	ldw	ra,8(sp)
    870c:	dc400117 	ldw	r17,4(sp)
    8710:	dc000017 	ldw	r16,0(sp)
    8714:	dec00304 	addi	sp,sp,12
    8718:	f800283a 	ret

0000871c <puts>:
    871c:	00800074 	movhi	r2,1
    8720:	200b883a 	mov	r5,r4
    8724:	11270c17 	ldw	r4,-25552(r2)
    8728:	000869c1 	jmpi	869c <_puts_r>

0000872c <_sbrk_r>:
    872c:	defffe04 	addi	sp,sp,-8
    8730:	dc000015 	stw	r16,0(sp)
    8734:	00800074 	movhi	r2,1
    8738:	2021883a 	mov	r16,r4
    873c:	2809883a 	mov	r4,r5
    8740:	dfc00115 	stw	ra,4(sp)
    8744:	10277015 	stw	zero,-25152(r2)
    8748:	00093880 	call	9388 <sbrk>
    874c:	10ffffd8 	cmpnei	r3,r2,-1
    8750:	1800041e 	bne	r3,zero,8764 <_sbrk_r+0x38>
    8754:	00c00074 	movhi	r3,1
    8758:	18e77017 	ldw	r3,-25152(r3)
    875c:	18000126 	beq	r3,zero,8764 <_sbrk_r+0x38>
    8760:	80c00015 	stw	r3,0(r16)
    8764:	dfc00117 	ldw	ra,4(sp)
    8768:	dc000017 	ldw	r16,0(sp)
    876c:	dec00204 	addi	sp,sp,8
    8770:	f800283a 	ret

00008774 <strlen>:
    8774:	2005883a 	mov	r2,r4
    8778:	10c00007 	ldb	r3,0(r2)
    877c:	1800021e 	bne	r3,zero,8788 <strlen+0x14>
    8780:	1105c83a 	sub	r2,r2,r4
    8784:	f800283a 	ret
    8788:	10800044 	addi	r2,r2,1
    878c:	003ffa06 	br	8778 <strlen+0x4>

00008790 <_strtol_l.constprop.0>:
    8790:	defff604 	addi	sp,sp,-40
    8794:	dfc00915 	stw	ra,36(sp)
    8798:	df000815 	stw	fp,32(sp)
    879c:	ddc00715 	stw	r23,28(sp)
    87a0:	dd800615 	stw	r22,24(sp)
    87a4:	dd400515 	stw	r21,20(sp)
    87a8:	dd000415 	stw	r20,16(sp)
    87ac:	dcc00315 	stw	r19,12(sp)
    87b0:	dc800215 	stw	r18,8(sp)
    87b4:	dc400115 	stw	r17,4(sp)
    87b8:	dc000015 	stw	r16,0(sp)
    87bc:	38800060 	cmpeqi	r2,r7,1
    87c0:	1000031e 	bne	r2,zero,87d0 <_strtol_l.constprop.0+0x40>
    87c4:	38800970 	cmpltui	r2,r7,37
    87c8:	3825883a 	mov	r18,r7
    87cc:	1000101e 	bne	r2,zero,8810 <_strtol_l.constprop.0+0x80>
    87d0:	0008f340 	call	8f34 <__errno>
    87d4:	00c00584 	movi	r3,22
    87d8:	10c00015 	stw	r3,0(r2)
    87dc:	0005883a 	mov	r2,zero
    87e0:	dfc00917 	ldw	ra,36(sp)
    87e4:	df000817 	ldw	fp,32(sp)
    87e8:	ddc00717 	ldw	r23,28(sp)
    87ec:	dd800617 	ldw	r22,24(sp)
    87f0:	dd400517 	ldw	r21,20(sp)
    87f4:	dd000417 	ldw	r20,16(sp)
    87f8:	dcc00317 	ldw	r19,12(sp)
    87fc:	dc800217 	ldw	r18,8(sp)
    8800:	dc400117 	ldw	r17,4(sp)
    8804:	dc000017 	ldw	r16,0(sp)
    8808:	dec00a04 	addi	sp,sp,40
    880c:	f800283a 	ret
    8810:	202f883a 	mov	r23,r4
    8814:	2829883a 	mov	r20,r5
    8818:	302b883a 	mov	r21,r6
    881c:	2823883a 	mov	r17,r5
    8820:	8807883a 	mov	r3,r17
    8824:	8c000003 	ldbu	r16,0(r17)
    8828:	00800074 	movhi	r2,1
    882c:	8c400044 	addi	r17,r17,1
    8830:	8085883a 	add	r2,r16,r2
    8834:	10a61843 	ldbu	r2,-26527(r2)
    8838:	1080020c 	andi	r2,r2,8
    883c:	103ff81e 	bne	r2,zero,8820 <_strtol_l.constprop.0+0x90>
    8840:	80800b58 	cmpnei	r2,r16,45
    8844:	10002a1e 	bne	r2,zero,88f0 <_strtol_l.constprop.0+0x160>
    8848:	8c000003 	ldbu	r16,0(r17)
    884c:	05800044 	movi	r22,1
    8850:	1c400084 	addi	r17,r3,2
    8854:	90004a26 	beq	r18,zero,8980 <_strtol_l.constprop.0+0x1f0>
    8858:	90800420 	cmpeqi	r2,r18,16
    885c:	10000926 	beq	r2,zero,8884 <_strtol_l.constprop.0+0xf4>
    8860:	80800c20 	cmpeqi	r2,r16,48
    8864:	10000726 	beq	r2,zero,8884 <_strtol_l.constprop.0+0xf4>
    8868:	88800003 	ldbu	r2,0(r17)
    886c:	108037cc 	andi	r2,r2,223
    8870:	10801618 	cmpnei	r2,r2,88
    8874:	10003e1e 	bne	r2,zero,8970 <_strtol_l.constprop.0+0x1e0>
    8878:	8c000043 	ldbu	r16,1(r17)
    887c:	04800404 	movi	r18,16
    8880:	8c400084 	addi	r17,r17,2
    8884:	04e00034 	movhi	r19,32768
    8888:	9cffffc4 	addi	r19,r19,-1
    888c:	b4e7883a 	add	r19,r22,r19
    8890:	900b883a 	mov	r5,r18
    8894:	9809883a 	mov	r4,r19
    8898:	00092340 	call	9234 <__umodsi3>
    889c:	900b883a 	mov	r5,r18
    88a0:	9809883a 	mov	r4,r19
    88a4:	1039883a 	mov	fp,r2
    88a8:	00091d00 	call	91d0 <__udivsi3>
    88ac:	0011883a 	mov	r8,zero
    88b0:	0007883a 	mov	r3,zero
    88b4:	81fff404 	addi	r7,r16,-48
    88b8:	390002a8 	cmpgeui	r4,r7,10
    88bc:	2000121e 	bne	r4,zero,8908 <_strtol_l.constprop.0+0x178>
    88c0:	3821883a 	mov	r16,r7
    88c4:	84801c0e 	bge	r16,r18,8938 <_strtol_l.constprop.0+0x1a8>
    88c8:	40001916 	blt	r8,zero,8930 <_strtol_l.constprop.0+0x1a0>
    88cc:	10c01836 	bltu	r2,r3,8930 <_strtol_l.constprop.0+0x1a0>
    88d0:	10c0011e 	bne	r2,r3,88d8 <_strtol_l.constprop.0+0x148>
    88d4:	e4001616 	blt	fp,r16,8930 <_strtol_l.constprop.0+0x1a0>
    88d8:	90c7383a 	mul	r3,r18,r3
    88dc:	02000044 	movi	r8,1
    88e0:	80c7883a 	add	r3,r16,r3
    88e4:	8c400044 	addi	r17,r17,1
    88e8:	8c3fffc3 	ldbu	r16,-1(r17)
    88ec:	003ff106 	br	88b4 <_strtol_l.constprop.0+0x124>
    88f0:	80800ad8 	cmpnei	r2,r16,43
    88f4:	1000021e 	bne	r2,zero,8900 <_strtol_l.constprop.0+0x170>
    88f8:	8c000003 	ldbu	r16,0(r17)
    88fc:	1c400084 	addi	r17,r3,2
    8900:	002d883a 	mov	r22,zero
    8904:	003fd306 	br	8854 <_strtol_l.constprop.0+0xc4>
    8908:	813fefc4 	addi	r4,r16,-65
    890c:	210006a8 	cmpgeui	r4,r4,26
    8910:	2000021e 	bne	r4,zero,891c <_strtol_l.constprop.0+0x18c>
    8914:	843ff244 	addi	r16,r16,-55
    8918:	003fea06 	br	88c4 <_strtol_l.constprop.0+0x134>
    891c:	813fe7c4 	addi	r4,r16,-97
    8920:	210006a8 	cmpgeui	r4,r4,26
    8924:	2000041e 	bne	r4,zero,8938 <_strtol_l.constprop.0+0x1a8>
    8928:	843fea44 	addi	r16,r16,-87
    892c:	003fe506 	br	88c4 <_strtol_l.constprop.0+0x134>
    8930:	023fffc4 	movi	r8,-1
    8934:	003feb06 	br	88e4 <_strtol_l.constprop.0+0x154>
    8938:	4000060e 	bge	r8,zero,8954 <_strtol_l.constprop.0+0x1c4>
    893c:	00800884 	movi	r2,34
    8940:	b8800015 	stw	r2,0(r23)
    8944:	9807883a 	mov	r3,r19
    8948:	a800061e 	bne	r21,zero,8964 <_strtol_l.constprop.0+0x1d4>
    894c:	1805883a 	mov	r2,r3
    8950:	003fa306 	br	87e0 <_strtol_l.constprop.0+0x50>
    8954:	b0000126 	beq	r22,zero,895c <_strtol_l.constprop.0+0x1cc>
    8958:	00c7c83a 	sub	r3,zero,r3
    895c:	a83ffb26 	beq	r21,zero,894c <_strtol_l.constprop.0+0x1bc>
    8960:	40000126 	beq	r8,zero,8968 <_strtol_l.constprop.0+0x1d8>
    8964:	8d3fffc4 	addi	r20,r17,-1
    8968:	ad000015 	stw	r20,0(r21)
    896c:	003ff706 	br	894c <_strtol_l.constprop.0+0x1bc>
    8970:	04000c04 	movi	r16,48
    8974:	903fc31e 	bne	r18,zero,8884 <_strtol_l.constprop.0+0xf4>
    8978:	04800204 	movi	r18,8
    897c:	003fc106 	br	8884 <_strtol_l.constprop.0+0xf4>
    8980:	80800c20 	cmpeqi	r2,r16,48
    8984:	103fb81e 	bne	r2,zero,8868 <_strtol_l.constprop.0+0xd8>
    8988:	04800284 	movi	r18,10
    898c:	003fbd06 	br	8884 <_strtol_l.constprop.0+0xf4>

00008990 <_strtol_r>:
    8990:	00087901 	jmpi	8790 <_strtol_l.constprop.0>

00008994 <strtol_l>:
    8994:	00800074 	movhi	r2,1
    8998:	300f883a 	mov	r7,r6
    899c:	280d883a 	mov	r6,r5
    89a0:	200b883a 	mov	r5,r4
    89a4:	11270c17 	ldw	r4,-25552(r2)
    89a8:	00087901 	jmpi	8790 <_strtol_l.constprop.0>

000089ac <strtol>:
    89ac:	00800074 	movhi	r2,1
    89b0:	300f883a 	mov	r7,r6
    89b4:	280d883a 	mov	r6,r5
    89b8:	200b883a 	mov	r5,r4
    89bc:	11270c17 	ldw	r4,-25552(r2)
    89c0:	00087901 	jmpi	8790 <_strtol_l.constprop.0>

000089c4 <print_repeat>:
    89c4:	defffb04 	addi	sp,sp,-20
    89c8:	dc800315 	stw	r18,12(sp)
    89cc:	dc400215 	stw	r17,8(sp)
    89d0:	dc000115 	stw	r16,4(sp)
    89d4:	dfc00415 	stw	ra,16(sp)
    89d8:	2025883a 	mov	r18,r4
    89dc:	2823883a 	mov	r17,r5
    89e0:	d9800005 	stb	r6,0(sp)
    89e4:	3821883a 	mov	r16,r7
    89e8:	04000716 	blt	zero,r16,8a08 <print_repeat+0x44>
    89ec:	0005883a 	mov	r2,zero
    89f0:	dfc00417 	ldw	ra,16(sp)
    89f4:	dc800317 	ldw	r18,12(sp)
    89f8:	dc400217 	ldw	r17,8(sp)
    89fc:	dc000117 	ldw	r16,4(sp)
    8a00:	dec00504 	addi	sp,sp,20
    8a04:	f800283a 	ret
    8a08:	88800117 	ldw	r2,4(r17)
    8a0c:	01c00044 	movi	r7,1
    8a10:	d80d883a 	mov	r6,sp
    8a14:	880b883a 	mov	r5,r17
    8a18:	9009883a 	mov	r4,r18
    8a1c:	103ee83a 	callr	r2
    8a20:	843fffc4 	addi	r16,r16,-1
    8a24:	103ff026 	beq	r2,zero,89e8 <print_repeat+0x24>
    8a28:	00bfffc4 	movi	r2,-1
    8a2c:	003ff006 	br	89f0 <print_repeat+0x2c>

00008a30 <___vfprintf_internal_r>:
    8a30:	deffe604 	addi	sp,sp,-104
    8a34:	df001815 	stw	fp,96(sp)
    8a38:	ddc01715 	stw	r23,92(sp)
    8a3c:	dd801615 	stw	r22,88(sp)
    8a40:	dd001415 	stw	r20,80(sp)
    8a44:	dcc01315 	stw	r19,76(sp)
    8a48:	dc801215 	stw	r18,72(sp)
    8a4c:	dc401115 	stw	r17,68(sp)
    8a50:	dc001015 	stw	r16,64(sp)
    8a54:	dfc01915 	stw	ra,100(sp)
    8a58:	dd401515 	stw	r21,84(sp)
    8a5c:	2021883a 	mov	r16,r4
    8a60:	282f883a 	mov	r23,r5
    8a64:	d9800515 	stw	r6,20(sp)
    8a68:	3839883a 	mov	fp,r7
    8a6c:	002d883a 	mov	r22,zero
    8a70:	d8000215 	stw	zero,8(sp)
    8a74:	0027883a 	mov	r19,zero
    8a78:	0029883a 	mov	r20,zero
    8a7c:	0025883a 	mov	r18,zero
    8a80:	0023883a 	mov	r17,zero
    8a84:	d8000115 	stw	zero,4(sp)
    8a88:	d8000015 	stw	zero,0(sp)
    8a8c:	0005883a 	mov	r2,zero
    8a90:	00000206 	br	8a9c <___vfprintf_internal_r+0x6c>
    8a94:	118000e0 	cmpeqi	r6,r2,3
    8a98:	30003d1e 	bne	r6,zero,8b90 <___vfprintf_internal_r+0x160>
    8a9c:	d8c00517 	ldw	r3,20(sp)
    8aa0:	19000003 	ldbu	r4,0(r3)
    8aa4:	18c00044 	addi	r3,r3,1
    8aa8:	d8c00515 	stw	r3,20(sp)
    8aac:	21403fcc 	andi	r5,r4,255
    8ab0:	2940201c 	xori	r5,r5,128
    8ab4:	297fe004 	addi	r5,r5,-128
    8ab8:	28001426 	beq	r5,zero,8b0c <___vfprintf_internal_r+0xdc>
    8abc:	118000a0 	cmpeqi	r6,r2,2
    8ac0:	3000231e 	bne	r6,zero,8b50 <___vfprintf_internal_r+0x120>
    8ac4:	118000c8 	cmpgei	r6,r2,3
    8ac8:	303ff21e 	bne	r6,zero,8a94 <___vfprintf_internal_r+0x64>
    8acc:	10000426 	beq	r2,zero,8ae0 <___vfprintf_internal_r+0xb0>
    8ad0:	10800060 	cmpeqi	r2,r2,1
    8ad4:	10001a1e 	bne	r2,zero,8b40 <___vfprintf_internal_r+0x110>
    8ad8:	00800084 	movi	r2,2
    8adc:	003fef06 	br	8a9c <___vfprintf_internal_r+0x6c>
    8ae0:	29400960 	cmpeqi	r5,r5,37
    8ae4:	2800f61e 	bne	r5,zero,8ec0 <___vfprintf_internal_r+0x490>
    8ae8:	b8800117 	ldw	r2,4(r23)
    8aec:	d9000805 	stb	r4,32(sp)
    8af0:	01c00044 	movi	r7,1
    8af4:	d9800804 	addi	r6,sp,32
    8af8:	b80b883a 	mov	r5,r23
    8afc:	8009883a 	mov	r4,r16
    8b00:	103ee83a 	callr	r2
    8b04:	10001b26 	beq	r2,zero,8b74 <___vfprintf_internal_r+0x144>
    8b08:	05bfffc4 	movi	r22,-1
    8b0c:	b005883a 	mov	r2,r22
    8b10:	dfc01917 	ldw	ra,100(sp)
    8b14:	df001817 	ldw	fp,96(sp)
    8b18:	ddc01717 	ldw	r23,92(sp)
    8b1c:	dd801617 	ldw	r22,88(sp)
    8b20:	dd401517 	ldw	r21,84(sp)
    8b24:	dd001417 	ldw	r20,80(sp)
    8b28:	dcc01317 	ldw	r19,76(sp)
    8b2c:	dc801217 	ldw	r18,72(sp)
    8b30:	dc401117 	ldw	r17,68(sp)
    8b34:	dc001017 	ldw	r16,64(sp)
    8b38:	dec01a04 	addi	sp,sp,104
    8b3c:	f800283a 	ret
    8b40:	28800c20 	cmpeqi	r2,r5,48
    8b44:	1000e71e 	bne	r2,zero,8ee4 <___vfprintf_internal_r+0x4b4>
    8b48:	28800958 	cmpnei	r2,r5,37
    8b4c:	103fe626 	beq	r2,zero,8ae8 <___vfprintf_internal_r+0xb8>
    8b50:	20bff404 	addi	r2,r4,-48
    8b54:	10803fcc 	andi	r2,r2,255
    8b58:	118002a8 	cmpgeui	r6,r2,10
    8b5c:	3000091e 	bne	r6,zero,8b84 <___vfprintf_internal_r+0x154>
    8b60:	893fffe0 	cmpeqi	r4,r17,-1
    8b64:	2000051e 	bne	r4,zero,8b7c <___vfprintf_internal_r+0x14c>
    8b68:	8c4002a4 	muli	r17,r17,10
    8b6c:	1463883a 	add	r17,r2,r17
    8b70:	003fd906 	br	8ad8 <___vfprintf_internal_r+0xa8>
    8b74:	b5800044 	addi	r22,r22,1
    8b78:	003fc806 	br	8a9c <___vfprintf_internal_r+0x6c>
    8b7c:	0023883a 	mov	r17,zero
    8b80:	003ffa06 	br	8b6c <___vfprintf_internal_r+0x13c>
    8b84:	28800ba0 	cmpeqi	r2,r5,46
    8b88:	1000db1e 	bne	r2,zero,8ef8 <___vfprintf_internal_r+0x4c8>
    8b8c:	00800084 	movi	r2,2
    8b90:	213ff404 	addi	r4,r4,-48
    8b94:	21003fcc 	andi	r4,r4,255
    8b98:	218002a8 	cmpgeui	r6,r4,10
    8b9c:	3000071e 	bne	r6,zero,8bbc <___vfprintf_internal_r+0x18c>
    8ba0:	917fffe0 	cmpeqi	r5,r18,-1
    8ba4:	2800031e 	bne	r5,zero,8bb4 <___vfprintf_internal_r+0x184>
    8ba8:	948002a4 	muli	r18,r18,10
    8bac:	24a5883a 	add	r18,r4,r18
    8bb0:	003fba06 	br	8a9c <___vfprintf_internal_r+0x6c>
    8bb4:	0025883a 	mov	r18,zero
    8bb8:	003ffc06 	br	8bac <___vfprintf_internal_r+0x17c>
    8bbc:	28801b20 	cmpeqi	r2,r5,108
    8bc0:	1000cb1e 	bne	r2,zero,8ef0 <___vfprintf_internal_r+0x4c0>
    8bc4:	90bfffe0 	cmpeqi	r2,r18,-1
    8bc8:	10000f1e 	bne	r2,zero,8c08 <___vfprintf_internal_r+0x1d8>
    8bcc:	d8000015 	stw	zero,0(sp)
    8bd0:	28801be0 	cmpeqi	r2,r5,111
    8bd4:	1000ca1e 	bne	r2,zero,8f00 <___vfprintf_internal_r+0x4d0>
    8bd8:	28801c08 	cmpgei	r2,r5,112
    8bdc:	1000171e 	bne	r2,zero,8c3c <___vfprintf_internal_r+0x20c>
    8be0:	288018e0 	cmpeqi	r2,r5,99
    8be4:	10009f1e 	bne	r2,zero,8e64 <___vfprintf_internal_r+0x434>
    8be8:	28801908 	cmpgei	r2,r5,100
    8bec:	1000081e 	bne	r2,zero,8c10 <___vfprintf_internal_r+0x1e0>
    8bf0:	29401620 	cmpeqi	r5,r5,88
    8bf4:	283fa526 	beq	r5,zero,8a8c <___vfprintf_internal_r+0x5c>
    8bf8:	00800044 	movi	r2,1
    8bfc:	d8800215 	stw	r2,8(sp)
    8c00:	05000404 	movi	r20,16
    8c04:	0000bf06 	br	8f04 <___vfprintf_internal_r+0x4d4>
    8c08:	04800044 	movi	r18,1
    8c0c:	003ff006 	br	8bd0 <___vfprintf_internal_r+0x1a0>
    8c10:	28801920 	cmpeqi	r2,r5,100
    8c14:	1000021e 	bne	r2,zero,8c20 <___vfprintf_internal_r+0x1f0>
    8c18:	29401a60 	cmpeqi	r5,r5,105
    8c1c:	283f9b26 	beq	r5,zero,8a8c <___vfprintf_internal_r+0x5c>
    8c20:	e0800104 	addi	r2,fp,4
    8c24:	d8800415 	stw	r2,16(sp)
    8c28:	9800b626 	beq	r19,zero,8f04 <___vfprintf_internal_r+0x4d4>
    8c2c:	e5400017 	ldw	r21,0(fp)
    8c30:	a8002216 	blt	r21,zero,8cbc <___vfprintf_internal_r+0x28c>
    8c34:	04c00044 	movi	r19,1
    8c38:	0000b606 	br	8f14 <___vfprintf_internal_r+0x4e4>
    8c3c:	28801d60 	cmpeqi	r2,r5,117
    8c40:	1000b01e 	bne	r2,zero,8f04 <___vfprintf_internal_r+0x4d4>
    8c44:	28801e20 	cmpeqi	r2,r5,120
    8c48:	103fed1e 	bne	r2,zero,8c00 <___vfprintf_internal_r+0x1d0>
    8c4c:	29401ce0 	cmpeqi	r5,r5,115
    8c50:	283f8e26 	beq	r5,zero,8a8c <___vfprintf_internal_r+0x5c>
    8c54:	e5400017 	ldw	r21,0(fp)
    8c58:	e0800104 	addi	r2,fp,4
    8c5c:	d8800315 	stw	r2,12(sp)
    8c60:	a809883a 	mov	r4,r21
    8c64:	00087740 	call	8774 <strlen>
    8c68:	888fc83a 	sub	r7,r17,r2
    8c6c:	1039883a 	mov	fp,r2
    8c70:	01c0080e 	bge	zero,r7,8c94 <___vfprintf_internal_r+0x264>
    8c74:	01800804 	movi	r6,32
    8c78:	b80b883a 	mov	r5,r23
    8c7c:	8009883a 	mov	r4,r16
    8c80:	d9c00415 	stw	r7,16(sp)
    8c84:	00089c40 	call	89c4 <print_repeat>
    8c88:	103f9f1e 	bne	r2,zero,8b08 <___vfprintf_internal_r+0xd8>
    8c8c:	d9c00417 	ldw	r7,16(sp)
    8c90:	b1ed883a 	add	r22,r22,r7
    8c94:	b8800117 	ldw	r2,4(r23)
    8c98:	e00f883a 	mov	r7,fp
    8c9c:	a80d883a 	mov	r6,r21
    8ca0:	b80b883a 	mov	r5,r23
    8ca4:	8009883a 	mov	r4,r16
    8ca8:	103ee83a 	callr	r2
    8cac:	103f961e 	bne	r2,zero,8b08 <___vfprintf_internal_r+0xd8>
    8cb0:	b72d883a 	add	r22,r22,fp
    8cb4:	df000317 	ldw	fp,12(sp)
    8cb8:	003f7806 	br	8a9c <___vfprintf_internal_r+0x6c>
    8cbc:	056bc83a 	sub	r21,zero,r21
    8cc0:	04c00044 	movi	r19,1
    8cc4:	00c00044 	movi	r3,1
    8cc8:	df000804 	addi	fp,sp,32
    8ccc:	e00d883a 	mov	r6,fp
    8cd0:	a8002e1e 	bne	r21,zero,8d8c <___vfprintf_internal_r+0x35c>
    8cd4:	e185c83a 	sub	r2,fp,r6
    8cd8:	d8800315 	stw	r2,12(sp)
    8cdc:	9085c83a 	sub	r2,r18,r2
    8ce0:	0080090e 	bge	zero,r2,8d08 <___vfprintf_internal_r+0x2d8>
    8ce4:	e085883a 	add	r2,fp,r2
    8ce8:	d9001004 	addi	r4,sp,64
    8cec:	e100042e 	bgeu	fp,r4,8d00 <___vfprintf_internal_r+0x2d0>
    8cf0:	e7000044 	addi	fp,fp,1
    8cf4:	01000c04 	movi	r4,48
    8cf8:	e13fffc5 	stb	r4,-1(fp)
    8cfc:	e0bffa1e 	bne	fp,r2,8ce8 <___vfprintf_internal_r+0x2b8>
    8d00:	e185c83a 	sub	r2,fp,r6
    8d04:	d8800315 	stw	r2,12(sp)
    8d08:	d8800317 	ldw	r2,12(sp)
    8d0c:	1897883a 	add	r11,r3,r2
    8d10:	d8800017 	ldw	r2,0(sp)
    8d14:	8aebc83a 	sub	r21,r17,r11
    8d18:	10003126 	beq	r2,zero,8de0 <___vfprintf_internal_r+0x3b0>
    8d1c:	18000a26 	beq	r3,zero,8d48 <___vfprintf_internal_r+0x318>
    8d20:	00800b44 	movi	r2,45
    8d24:	d88007c5 	stb	r2,31(sp)
    8d28:	b8800117 	ldw	r2,4(r23)
    8d2c:	01c00044 	movi	r7,1
    8d30:	d98007c4 	addi	r6,sp,31
    8d34:	b80b883a 	mov	r5,r23
    8d38:	8009883a 	mov	r4,r16
    8d3c:	103ee83a 	callr	r2
    8d40:	103f711e 	bne	r2,zero,8b08 <___vfprintf_internal_r+0xd8>
    8d44:	b5800044 	addi	r22,r22,1
    8d48:	0540070e 	bge	zero,r21,8d68 <___vfprintf_internal_r+0x338>
    8d4c:	a80f883a 	mov	r7,r21
    8d50:	01800c04 	movi	r6,48
    8d54:	b80b883a 	mov	r5,r23
    8d58:	8009883a 	mov	r4,r16
    8d5c:	00089c40 	call	89c4 <print_repeat>
    8d60:	103f691e 	bne	r2,zero,8b08 <___vfprintf_internal_r+0xd8>
    8d64:	b56d883a 	add	r22,r22,r21
    8d68:	d8800317 	ldw	r2,12(sp)
    8d6c:	b72d883a 	add	r22,r22,fp
    8d70:	172bc83a 	sub	r21,r2,fp
    8d74:	af05883a 	add	r2,r21,fp
    8d78:	b707c83a 	sub	r3,r22,fp
    8d7c:	00802e16 	blt	zero,r2,8e38 <___vfprintf_internal_r+0x408>
    8d80:	df000417 	ldw	fp,16(sp)
    8d84:	182d883a 	mov	r22,r3
    8d88:	003f4006 	br	8a8c <___vfprintf_internal_r+0x5c>
    8d8c:	a809883a 	mov	r4,r21
    8d90:	a00b883a 	mov	r5,r20
    8d94:	d8c00315 	stw	r3,12(sp)
    8d98:	00091d00 	call	91d0 <__udivsi3>
    8d9c:	1509383a 	mul	r4,r2,r20
    8da0:	d8c00317 	ldw	r3,12(sp)
    8da4:	d9800804 	addi	r6,sp,32
    8da8:	a92bc83a 	sub	r21,r21,r4
    8dac:	a9000288 	cmpgei	r4,r21,10
    8db0:	2000051e 	bne	r4,zero,8dc8 <___vfprintf_internal_r+0x398>
    8db4:	ad400c04 	addi	r21,r21,48
    8db8:	e7000044 	addi	fp,fp,1
    8dbc:	e57fffc5 	stb	r21,-1(fp)
    8dc0:	102b883a 	mov	r21,r2
    8dc4:	003fc206 	br	8cd0 <___vfprintf_internal_r+0x2a0>
    8dc8:	d9000217 	ldw	r4,8(sp)
    8dcc:	20000226 	beq	r4,zero,8dd8 <___vfprintf_internal_r+0x3a8>
    8dd0:	ad400dc4 	addi	r21,r21,55
    8dd4:	003ff806 	br	8db8 <___vfprintf_internal_r+0x388>
    8dd8:	ad4015c4 	addi	r21,r21,87
    8ddc:	003ff606 	br	8db8 <___vfprintf_internal_r+0x388>
    8de0:	0540090e 	bge	zero,r21,8e08 <___vfprintf_internal_r+0x3d8>
    8de4:	a80f883a 	mov	r7,r21
    8de8:	01800804 	movi	r6,32
    8dec:	b80b883a 	mov	r5,r23
    8df0:	8009883a 	mov	r4,r16
    8df4:	d8c00615 	stw	r3,24(sp)
    8df8:	00089c40 	call	89c4 <print_repeat>
    8dfc:	103f421e 	bne	r2,zero,8b08 <___vfprintf_internal_r+0xd8>
    8e00:	d8c00617 	ldw	r3,24(sp)
    8e04:	b56d883a 	add	r22,r22,r21
    8e08:	183fd726 	beq	r3,zero,8d68 <___vfprintf_internal_r+0x338>
    8e0c:	00800b44 	movi	r2,45
    8e10:	d88007c5 	stb	r2,31(sp)
    8e14:	b8800117 	ldw	r2,4(r23)
    8e18:	01c00044 	movi	r7,1
    8e1c:	d98007c4 	addi	r6,sp,31
    8e20:	b80b883a 	mov	r5,r23
    8e24:	8009883a 	mov	r4,r16
    8e28:	103ee83a 	callr	r2
    8e2c:	103f361e 	bne	r2,zero,8b08 <___vfprintf_internal_r+0xd8>
    8e30:	b5800044 	addi	r22,r22,1
    8e34:	003fcc06 	br	8d68 <___vfprintf_internal_r+0x338>
    8e38:	e0bfffc3 	ldbu	r2,-1(fp)
    8e3c:	01c00044 	movi	r7,1
    8e40:	d98007c4 	addi	r6,sp,31
    8e44:	d88007c5 	stb	r2,31(sp)
    8e48:	b8800117 	ldw	r2,4(r23)
    8e4c:	b80b883a 	mov	r5,r23
    8e50:	8009883a 	mov	r4,r16
    8e54:	e73fffc4 	addi	fp,fp,-1
    8e58:	103ee83a 	callr	r2
    8e5c:	103fc526 	beq	r2,zero,8d74 <___vfprintf_internal_r+0x344>
    8e60:	003f2906 	br	8b08 <___vfprintf_internal_r+0xd8>
    8e64:	88800090 	cmplti	r2,r17,2
    8e68:	1000081e 	bne	r2,zero,8e8c <___vfprintf_internal_r+0x45c>
    8e6c:	8d7fffc4 	addi	r21,r17,-1
    8e70:	a80f883a 	mov	r7,r21
    8e74:	01800804 	movi	r6,32
    8e78:	b80b883a 	mov	r5,r23
    8e7c:	8009883a 	mov	r4,r16
    8e80:	00089c40 	call	89c4 <print_repeat>
    8e84:	103f201e 	bne	r2,zero,8b08 <___vfprintf_internal_r+0xd8>
    8e88:	b56d883a 	add	r22,r22,r21
    8e8c:	e0800017 	ldw	r2,0(fp)
    8e90:	01c00044 	movi	r7,1
    8e94:	d9800804 	addi	r6,sp,32
    8e98:	d8800805 	stb	r2,32(sp)
    8e9c:	b8800117 	ldw	r2,4(r23)
    8ea0:	b80b883a 	mov	r5,r23
    8ea4:	8009883a 	mov	r4,r16
    8ea8:	e5400104 	addi	r21,fp,4
    8eac:	103ee83a 	callr	r2
    8eb0:	103f151e 	bne	r2,zero,8b08 <___vfprintf_internal_r+0xd8>
    8eb4:	b5800044 	addi	r22,r22,1
    8eb8:	a839883a 	mov	fp,r21
    8ebc:	003ef706 	br	8a9c <___vfprintf_internal_r+0x6c>
    8ec0:	d8000215 	stw	zero,8(sp)
    8ec4:	d8000115 	stw	zero,4(sp)
    8ec8:	d8000015 	stw	zero,0(sp)
    8ecc:	04c00044 	movi	r19,1
    8ed0:	05000284 	movi	r20,10
    8ed4:	04bfffc4 	movi	r18,-1
    8ed8:	047fffc4 	movi	r17,-1
    8edc:	00800044 	movi	r2,1
    8ee0:	003eee06 	br	8a9c <___vfprintf_internal_r+0x6c>
    8ee4:	00800044 	movi	r2,1
    8ee8:	d8800015 	stw	r2,0(sp)
    8eec:	003efa06 	br	8ad8 <___vfprintf_internal_r+0xa8>
    8ef0:	00800044 	movi	r2,1
    8ef4:	d8800115 	stw	r2,4(sp)
    8ef8:	008000c4 	movi	r2,3
    8efc:	003ee706 	br	8a9c <___vfprintf_internal_r+0x6c>
    8f00:	05000204 	movi	r20,8
    8f04:	e0800104 	addi	r2,fp,4
    8f08:	d8800415 	stw	r2,16(sp)
    8f0c:	e5400017 	ldw	r21,0(fp)
    8f10:	0027883a 	mov	r19,zero
    8f14:	0007883a 	mov	r3,zero
    8f18:	003f6b06 	br	8cc8 <___vfprintf_internal_r+0x298>

00008f1c <__vfprintf_internal>:
    8f1c:	00800074 	movhi	r2,1
    8f20:	300f883a 	mov	r7,r6
    8f24:	280d883a 	mov	r6,r5
    8f28:	200b883a 	mov	r5,r4
    8f2c:	11270c17 	ldw	r4,-25552(r2)
    8f30:	0008a301 	jmpi	8a30 <___vfprintf_internal_r>

00008f34 <__errno>:
    8f34:	00800074 	movhi	r2,1
    8f38:	10a70c17 	ldw	r2,-25552(r2)
    8f3c:	f800283a 	ret

00008f40 <__sfvwrite_small_dev>:
    8f40:	2880000b 	ldhu	r2,0(r5)
    8f44:	1080020c 	andi	r2,r2,8
    8f48:	10002526 	beq	r2,zero,8fe0 <__sfvwrite_small_dev+0xa0>
    8f4c:	2880008f 	ldh	r2,2(r5)
    8f50:	defffb04 	addi	sp,sp,-20
    8f54:	dcc00315 	stw	r19,12(sp)
    8f58:	dc800215 	stw	r18,8(sp)
    8f5c:	dc400115 	stw	r17,4(sp)
    8f60:	dc000015 	stw	r16,0(sp)
    8f64:	dfc00415 	stw	ra,16(sp)
    8f68:	2027883a 	mov	r19,r4
    8f6c:	2821883a 	mov	r16,r5
    8f70:	3025883a 	mov	r18,r6
    8f74:	3823883a 	mov	r17,r7
    8f78:	1000100e 	bge	r2,zero,8fbc <__sfvwrite_small_dev+0x7c>
    8f7c:	8080000b 	ldhu	r2,0(r16)
    8f80:	10801014 	ori	r2,r2,64
    8f84:	8080000d 	sth	r2,0(r16)
    8f88:	00bfffc4 	movi	r2,-1
    8f8c:	00000d06 	br	8fc4 <__sfvwrite_small_dev+0x84>
    8f90:	88810050 	cmplti	r2,r17,1025
    8f94:	880f883a 	mov	r7,r17
    8f98:	1000011e 	bne	r2,zero,8fa0 <__sfvwrite_small_dev+0x60>
    8f9c:	01c10004 	movi	r7,1024
    8fa0:	8140008f 	ldh	r5,2(r16)
    8fa4:	900d883a 	mov	r6,r18
    8fa8:	9809883a 	mov	r4,r19
    8fac:	000908c0 	call	908c <_write_r>
    8fb0:	00bff20e 	bge	zero,r2,8f7c <__sfvwrite_small_dev+0x3c>
    8fb4:	88a3c83a 	sub	r17,r17,r2
    8fb8:	90a5883a 	add	r18,r18,r2
    8fbc:	047ff416 	blt	zero,r17,8f90 <__sfvwrite_small_dev+0x50>
    8fc0:	0005883a 	mov	r2,zero
    8fc4:	dfc00417 	ldw	ra,16(sp)
    8fc8:	dcc00317 	ldw	r19,12(sp)
    8fcc:	dc800217 	ldw	r18,8(sp)
    8fd0:	dc400117 	ldw	r17,4(sp)
    8fd4:	dc000017 	ldw	r16,0(sp)
    8fd8:	dec00504 	addi	sp,sp,20
    8fdc:	f800283a 	ret
    8fe0:	00bfffc4 	movi	r2,-1
    8fe4:	f800283a 	ret

00008fe8 <putc>:
    8fe8:	defffd04 	addi	sp,sp,-12
    8fec:	00800074 	movhi	r2,1
    8ff0:	dc000115 	stw	r16,4(sp)
    8ff4:	dfc00215 	stw	ra,8(sp)
    8ff8:	10a3d004 	addi	r2,r2,-28864
    8ffc:	28800115 	stw	r2,4(r5)
    9000:	00800074 	movhi	r2,1
    9004:	d90000c5 	stb	r4,3(sp)
    9008:	2021883a 	mov	r16,r4
    900c:	11270c17 	ldw	r4,-25552(r2)
    9010:	01c00044 	movi	r7,1
    9014:	d98000c4 	addi	r6,sp,3
    9018:	0008f400 	call	8f40 <__sfvwrite_small_dev>
    901c:	10ffffe0 	cmpeqi	r3,r2,-1
    9020:	1800011e 	bne	r3,zero,9028 <putc+0x40>
    9024:	8005883a 	mov	r2,r16
    9028:	dfc00217 	ldw	ra,8(sp)
    902c:	dc000117 	ldw	r16,4(sp)
    9030:	dec00304 	addi	sp,sp,12
    9034:	f800283a 	ret

00009038 <_putc_r>:
    9038:	defffd04 	addi	sp,sp,-12
    903c:	00800074 	movhi	r2,1
    9040:	dc000115 	stw	r16,4(sp)
    9044:	dfc00215 	stw	ra,8(sp)
    9048:	10a3d004 	addi	r2,r2,-28864
    904c:	30800115 	stw	r2,4(r6)
    9050:	00800074 	movhi	r2,1
    9054:	11270c17 	ldw	r4,-25552(r2)
    9058:	2821883a 	mov	r16,r5
    905c:	01c00044 	movi	r7,1
    9060:	300b883a 	mov	r5,r6
    9064:	d98000c4 	addi	r6,sp,3
    9068:	dc0000c5 	stb	r16,3(sp)
    906c:	0008f400 	call	8f40 <__sfvwrite_small_dev>
    9070:	10ffffe0 	cmpeqi	r3,r2,-1
    9074:	1800011e 	bne	r3,zero,907c <_putc_r+0x44>
    9078:	8005883a 	mov	r2,r16
    907c:	dfc00217 	ldw	ra,8(sp)
    9080:	dc000117 	ldw	r16,4(sp)
    9084:	dec00304 	addi	sp,sp,12
    9088:	f800283a 	ret

0000908c <_write_r>:
    908c:	defffe04 	addi	sp,sp,-8
    9090:	dc000015 	stw	r16,0(sp)
    9094:	00800074 	movhi	r2,1
    9098:	2021883a 	mov	r16,r4
    909c:	2809883a 	mov	r4,r5
    90a0:	300b883a 	mov	r5,r6
    90a4:	380d883a 	mov	r6,r7
    90a8:	dfc00115 	stw	ra,4(sp)
    90ac:	10277015 	stw	zero,-25152(r2)
    90b0:	00093d40 	call	93d4 <write>
    90b4:	10ffffd8 	cmpnei	r3,r2,-1
    90b8:	1800041e 	bne	r3,zero,90cc <_write_r+0x40>
    90bc:	00c00074 	movhi	r3,1
    90c0:	18e77017 	ldw	r3,-25152(r3)
    90c4:	18000126 	beq	r3,zero,90cc <_write_r+0x40>
    90c8:	80c00015 	stw	r3,0(r16)
    90cc:	dfc00117 	ldw	ra,4(sp)
    90d0:	dc000017 	ldw	r16,0(sp)
    90d4:	dec00204 	addi	sp,sp,8
    90d8:	f800283a 	ret

000090dc <__divsi3>:
    90dc:	20001a16 	blt	r4,zero,9148 <__divsi3+0x6c>
    90e0:	000f883a 	mov	r7,zero
    90e4:	2800020e 	bge	r5,zero,90f0 <__divsi3+0x14>
    90e8:	014bc83a 	sub	r5,zero,r5
    90ec:	39c0005c 	xori	r7,r7,1
    90f0:	200d883a 	mov	r6,r4
    90f4:	00c00044 	movi	r3,1
    90f8:	2900092e 	bgeu	r5,r4,9120 <__divsi3+0x44>
    90fc:	00800804 	movi	r2,32
    9100:	00c00044 	movi	r3,1
    9104:	00000106 	br	910c <__divsi3+0x30>
    9108:	10001226 	beq	r2,zero,9154 <__divsi3+0x78>
    910c:	294b883a 	add	r5,r5,r5
    9110:	10bfffc4 	addi	r2,r2,-1
    9114:	18c7883a 	add	r3,r3,r3
    9118:	293ffb36 	bltu	r5,r4,9108 <__divsi3+0x2c>
    911c:	18000d26 	beq	r3,zero,9154 <__divsi3+0x78>
    9120:	0005883a 	mov	r2,zero
    9124:	31400236 	bltu	r6,r5,9130 <__divsi3+0x54>
    9128:	314dc83a 	sub	r6,r6,r5
    912c:	10c4b03a 	or	r2,r2,r3
    9130:	1806d07a 	srli	r3,r3,1
    9134:	280ad07a 	srli	r5,r5,1
    9138:	183ffa1e 	bne	r3,zero,9124 <__divsi3+0x48>
    913c:	38000126 	beq	r7,zero,9144 <__divsi3+0x68>
    9140:	0085c83a 	sub	r2,zero,r2
    9144:	f800283a 	ret
    9148:	0109c83a 	sub	r4,zero,r4
    914c:	01c00044 	movi	r7,1
    9150:	003fe406 	br	90e4 <__divsi3+0x8>
    9154:	0005883a 	mov	r2,zero
    9158:	003ff806 	br	913c <__divsi3+0x60>

0000915c <__modsi3>:
    915c:	20001916 	blt	r4,zero,91c4 <__modsi3+0x68>
    9160:	000f883a 	mov	r7,zero
    9164:	2005883a 	mov	r2,r4
    9168:	2800010e 	bge	r5,zero,9170 <__modsi3+0x14>
    916c:	014bc83a 	sub	r5,zero,r5
    9170:	00c00044 	movi	r3,1
    9174:	2900092e 	bgeu	r5,r4,919c <__modsi3+0x40>
    9178:	01800804 	movi	r6,32
    917c:	00c00044 	movi	r3,1
    9180:	00000106 	br	9188 <__modsi3+0x2c>
    9184:	30000d26 	beq	r6,zero,91bc <__modsi3+0x60>
    9188:	294b883a 	add	r5,r5,r5
    918c:	31bfffc4 	addi	r6,r6,-1
    9190:	18c7883a 	add	r3,r3,r3
    9194:	293ffb36 	bltu	r5,r4,9184 <__modsi3+0x28>
    9198:	18000826 	beq	r3,zero,91bc <__modsi3+0x60>
    919c:	1806d07a 	srli	r3,r3,1
    91a0:	11400136 	bltu	r2,r5,91a8 <__modsi3+0x4c>
    91a4:	1145c83a 	sub	r2,r2,r5
    91a8:	280ad07a 	srli	r5,r5,1
    91ac:	183ffb1e 	bne	r3,zero,919c <__modsi3+0x40>
    91b0:	38000126 	beq	r7,zero,91b8 <__modsi3+0x5c>
    91b4:	0085c83a 	sub	r2,zero,r2
    91b8:	f800283a 	ret
    91bc:	2005883a 	mov	r2,r4
    91c0:	003ffb06 	br	91b0 <__modsi3+0x54>
    91c4:	0109c83a 	sub	r4,zero,r4
    91c8:	01c00044 	movi	r7,1
    91cc:	003fe506 	br	9164 <__modsi3+0x8>

000091d0 <__udivsi3>:
    91d0:	200d883a 	mov	r6,r4
    91d4:	2900152e 	bgeu	r5,r4,922c <__udivsi3+0x5c>
    91d8:	28001416 	blt	r5,zero,922c <__udivsi3+0x5c>
    91dc:	00800804 	movi	r2,32
    91e0:	00c00044 	movi	r3,1
    91e4:	00000206 	br	91f0 <__udivsi3+0x20>
    91e8:	10000e26 	beq	r2,zero,9224 <__udivsi3+0x54>
    91ec:	28000516 	blt	r5,zero,9204 <__udivsi3+0x34>
    91f0:	294b883a 	add	r5,r5,r5
    91f4:	10bfffc4 	addi	r2,r2,-1
    91f8:	18c7883a 	add	r3,r3,r3
    91fc:	293ffa36 	bltu	r5,r4,91e8 <__udivsi3+0x18>
    9200:	18000826 	beq	r3,zero,9224 <__udivsi3+0x54>
    9204:	0005883a 	mov	r2,zero
    9208:	31400236 	bltu	r6,r5,9214 <__udivsi3+0x44>
    920c:	314dc83a 	sub	r6,r6,r5
    9210:	10c4b03a 	or	r2,r2,r3
    9214:	1806d07a 	srli	r3,r3,1
    9218:	280ad07a 	srli	r5,r5,1
    921c:	183ffa1e 	bne	r3,zero,9208 <__udivsi3+0x38>
    9220:	f800283a 	ret
    9224:	0005883a 	mov	r2,zero
    9228:	f800283a 	ret
    922c:	00c00044 	movi	r3,1
    9230:	003ff406 	br	9204 <__udivsi3+0x34>

00009234 <__umodsi3>:
    9234:	2005883a 	mov	r2,r4
    9238:	2900132e 	bgeu	r5,r4,9288 <__umodsi3+0x54>
    923c:	28001216 	blt	r5,zero,9288 <__umodsi3+0x54>
    9240:	01800804 	movi	r6,32
    9244:	00c00044 	movi	r3,1
    9248:	00000206 	br	9254 <__umodsi3+0x20>
    924c:	30000c26 	beq	r6,zero,9280 <__umodsi3+0x4c>
    9250:	28000516 	blt	r5,zero,9268 <__umodsi3+0x34>
    9254:	294b883a 	add	r5,r5,r5
    9258:	31bfffc4 	addi	r6,r6,-1
    925c:	18c7883a 	add	r3,r3,r3
    9260:	293ffa36 	bltu	r5,r4,924c <__umodsi3+0x18>
    9264:	18000626 	beq	r3,zero,9280 <__umodsi3+0x4c>
    9268:	1806d07a 	srli	r3,r3,1
    926c:	11400136 	bltu	r2,r5,9274 <__umodsi3+0x40>
    9270:	1145c83a 	sub	r2,r2,r5
    9274:	280ad07a 	srli	r5,r5,1
    9278:	183ffb1e 	bne	r3,zero,9268 <__umodsi3+0x34>
    927c:	f800283a 	ret
    9280:	2005883a 	mov	r2,r4
    9284:	f800283a 	ret
    9288:	00c00044 	movi	r3,1
    928c:	003ff606 	br	9268 <__umodsi3+0x34>

00009290 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    9290:	00800074 	movhi	r2,1
    9294:	11e6f717 	ldw	r7,-25636(r2)
{
    9298:	defffe04 	addi	sp,sp,-8
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    929c:	01000074 	movhi	r4,1
    92a0:	01800044 	movi	r6,1
    92a4:	d94000c4 	addi	r5,sp,3
    92a8:	21270e04 	addi	r4,r4,-25544
{
    92ac:	dfc00115 	stw	ra,4(sp)
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    92b0:	00094540 	call	9454 <altera_avalon_jtag_uart_read>
    92b4:	0080040e 	bge	zero,r2,92c8 <alt_getchar+0x38>
        return -1;
    }
    return c;
    92b8:	d88000c7 	ldb	r2,3(sp)
#else
    return getchar();
#endif
#endif
}
    92bc:	dfc00117 	ldw	ra,4(sp)
    92c0:	dec00204 	addi	sp,sp,8
    92c4:	f800283a 	ret
        return -1;
    92c8:	00bfffc4 	movi	r2,-1
    92cc:	003ffb06 	br	92bc <alt_getchar+0x2c>

000092d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    92d0:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    92d4:	01000074 	movhi	r4,1
    92d8:	01400074 	movhi	r5,1
    92dc:	dfc00015 	stw	ra,0(sp)
    92e0:	2126bc04 	addi	r4,r4,-25872
    92e4:	29671504 	addi	r5,r5,-25516
    92e8:	21400426 	beq	r4,r5,92fc <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    92ec:	01800074 	movhi	r6,1
    92f0:	31a71504 	addi	r6,r6,-25516
    92f4:	310dc83a 	sub	r6,r6,r4
    92f8:	00095580 	call	9558 <memcpy>
  if (to != from)
    92fc:	01000074 	movhi	r4,1
    9300:	01400074 	movhi	r5,1
    9304:	21200804 	addi	r4,r4,-32736
    9308:	29600804 	addi	r5,r5,-32736
    930c:	21400426 	beq	r4,r5,9320 <alt_load+0x50>
      *to++ = *from++;
    9310:	01800074 	movhi	r6,1
    9314:	31a00804 	addi	r6,r6,-32736
    9318:	310dc83a 	sub	r6,r6,r4
    931c:	00095580 	call	9558 <memcpy>
  if (to != from)
    9320:	01000074 	movhi	r4,1
    9324:	01400074 	movhi	r5,1
    9328:	21256004 	addi	r4,r4,-27264
    932c:	29656004 	addi	r5,r5,-27264
    9330:	21400426 	beq	r4,r5,9344 <alt_load+0x74>
      *to++ = *from++;
    9334:	01800074 	movhi	r6,1
    9338:	31a6bc04 	addi	r6,r6,-25872
    933c:	310dc83a 	sub	r6,r6,r4
    9340:	00095580 	call	9558 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9344:	00094dc0 	call	94dc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    9348:	dfc00017 	ldw	ra,0(sp)
    934c:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    9350:	00094e81 	jmpi	94e8 <alt_icache_flush_all>

00009354 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9354:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9358:	0009883a 	mov	r4,zero
{
    935c:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    9360:	00094300 	call	9430 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9364:	00094500 	call	9450 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    9368:	d1a06617 	ldw	r6,-32360(gp)
    936c:	d1606717 	ldw	r5,-32356(gp)
    9370:	d1206817 	ldw	r4,-32352(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    9374:	dfc00017 	ldw	ra,0(sp)
    9378:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    937c:	00080cc1 	jmpi	80cc <main>

00009380 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    9380:	f800283a 	ret

00009384 <__malloc_unlock>:
    9384:	f800283a 	ret

00009388 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9388:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    938c:	00bfff84 	movi	r2,-2
    9390:	1884703a 	and	r2,r3,r2
    9394:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    9398:	d0a00217 	ldw	r2,-32760(gp)
    939c:	017fff04 	movi	r5,-4
    93a0:	108000c4 	addi	r2,r2,3
    93a4:	1144703a 	and	r2,r2,r5
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    93a8:	01400074 	movhi	r5,1
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    93ac:	d0a00215 	stw	r2,-32760(gp)
  if ((heap_end + incr) > __alt_heap_limit) {
    93b0:	1109883a 	add	r4,r2,r4
    93b4:	29740004 	addi	r5,r5,-12288
    93b8:	2900032e 	bgeu	r5,r4,93c8 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    93bc:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    93c0:	00bfffc4 	movi	r2,-1
    93c4:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    93c8:	d1200215 	stw	r4,-32760(gp)
    93cc:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    93d0:	f800283a 	ret

000093d4 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    93d4:	213fffc4 	addi	r4,r4,-1
    93d8:	210000a8 	cmpgeui	r4,r4,2
    93dc:	2000041e 	bne	r4,zero,93f0 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    93e0:	01000074 	movhi	r4,1
    93e4:	000f883a 	mov	r7,zero
    93e8:	21270e04 	addi	r4,r4,-25544
    93ec:	00094ac1 	jmpi	94ac <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    93f0:	d0a00917 	ldw	r2,-32732(gp)
    93f4:	10000926 	beq	r2,zero,941c <write+0x48>
{
    93f8:	deffff04 	addi	sp,sp,-4
    93fc:	dfc00015 	stw	ra,0(sp)
    9400:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    9404:	00c01444 	movi	r3,81
    9408:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    940c:	00bfffc4 	movi	r2,-1
    9410:	dfc00017 	ldw	ra,0(sp)
    9414:	dec00104 	addi	sp,sp,4
    9418:	f800283a 	ret
    941c:	d0a06504 	addi	r2,gp,-32364
        ALT_ERRNO = EBADFD;
    9420:	00c01444 	movi	r3,81
    9424:	10c00015 	stw	r3,0(r2)
}
    9428:	00bfffc4 	movi	r2,-1
    942c:	f800283a 	ret

00009430 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9430:	deffff04 	addi	sp,sp,-4
    9434:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    9438:	00094f40 	call	94f4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    943c:	00800044 	movi	r2,1
    9440:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9444:	dfc00017 	ldw	ra,0(sp)
    9448:	dec00104 	addi	sp,sp,4
    944c:	f800283a 	ret

00009450 <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    9450:	f800283a 	ret

00009454 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    9454:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    9458:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    945c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    9460:	3a10000c 	andi	r8,r7,16384
  while (ptr < end)
    9464:	11800536 	bltu	r2,r6,947c <altera_avalon_jtag_uart_read+0x28>
      break;   
    
  }

  if (ptr != buffer)
    9468:	11400b1e 	bne	r2,r5,9498 <altera_avalon_jtag_uart_read+0x44>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    946c:	39d0000c 	andi	r7,r7,16384
    9470:	38000c1e 	bne	r7,zero,94a4 <altera_avalon_jtag_uart_read+0x50>
    return -EWOULDBLOCK;
  else
    return -EIO;
    9474:	00bffec4 	movi	r2,-5
}
    9478:	f800283a 	ret
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    947c:	20c00037 	ldwio	r3,0(r4)
    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9480:	1a60000c 	andi	r9,r3,32768
    9484:	48000326 	beq	r9,zero,9494 <altera_avalon_jtag_uart_read+0x40>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9488:	10c00005 	stb	r3,0(r2)
    948c:	10800044 	addi	r2,r2,1
    9490:	003ff406 	br	9464 <altera_avalon_jtag_uart_read+0x10>
    else if (ptr != buffer)
    9494:	11400226 	beq	r2,r5,94a0 <altera_avalon_jtag_uart_read+0x4c>
    return ptr - buffer;
    9498:	1145c83a 	sub	r2,r2,r5
    949c:	f800283a 	ret
    else if(flags & O_NONBLOCK)
    94a0:	403ff026 	beq	r8,zero,9464 <altera_avalon_jtag_uart_read+0x10>
    return -EWOULDBLOCK;
    94a4:	00bffd44 	movi	r2,-11
    94a8:	f800283a 	ret

000094ac <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    94ac:	21000017 	ldw	r4,0(r4)
{
    94b0:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    94b4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    94b8:	29800136 	bltu	r5,r6,94c0 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    94bc:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    94c0:	20c00137 	ldwio	r3,4(r4)
    94c4:	18ffffec 	andhi	r3,r3,65535
    94c8:	183ffb26 	beq	r3,zero,94b8 <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    94cc:	28c00007 	ldb	r3,0(r5)
    94d0:	29400044 	addi	r5,r5,1
    94d4:	20c00035 	stwio	r3,0(r4)
    94d8:	003ff706 	br	94b8 <altera_avalon_jtag_uart_write+0xc>

000094dc <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    94dc:	f800283a 	ret

000094e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    94e0:	3005883a 	mov	r2,r6
  return len;
}
    94e4:	f800283a 	ret

000094e8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    94e8:	01420004 	movi	r5,2048
    94ec:	0009883a 	mov	r4,zero
    94f0:	00094fc1 	jmpi	94fc <alt_icache_flush>

000094f4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    94f4:	000170fa 	wrctl	ienable,zero
}
    94f8:	f800283a 	ret

000094fc <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    94fc:	28820070 	cmpltui	r2,r5,2049
    9500:	1000011e 	bne	r2,zero,9508 <alt_icache_flush+0xc>
    9504:	01420004 	movi	r5,2048
    9508:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    950c:	2005883a 	mov	r2,r4
    9510:	11400c36 	bltu	r2,r5,9544 <alt_icache_flush+0x48>
    9514:	20bff844 	addi	r2,r4,-31
    9518:	28800d36 	bltu	r5,r2,9550 <alt_icache_flush+0x54>
    951c:	290bc83a 	sub	r5,r5,r4
    9520:	294007c4 	addi	r5,r5,31
    9524:	280ad17a 	srli	r5,r5,5
    9528:	280a917a 	slli	r5,r5,5
    952c:	214b883a 	add	r5,r4,r5
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    9530:	210007cc 	andi	r4,r4,31
    9534:	20000126 	beq	r4,zero,953c <alt_icache_flush+0x40>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    9538:	2800603a 	flushi	r5
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    953c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    9540:	f800283a 	ret
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9544:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9548:	10800804 	addi	r2,r2,32
    954c:	003ff006 	br	9510 <alt_icache_flush+0x14>
    9550:	000b883a 	mov	r5,zero
    9554:	003ff506 	br	952c <alt_icache_flush+0x30>

00009558 <memcpy>:
    9558:	2005883a 	mov	r2,r4
    955c:	0007883a 	mov	r3,zero
    9560:	30c0011e 	bne	r6,r3,9568 <memcpy+0x10>
    9564:	f800283a 	ret
    9568:	28cf883a 	add	r7,r5,r3
    956c:	39c00003 	ldbu	r7,0(r7)
    9570:	10c9883a 	add	r4,r2,r3
    9574:	18c00044 	addi	r3,r3,1
    9578:	21c00005 	stb	r7,0(r4)
    957c:	003ff806 	br	9560 <memcpy+0x8>
